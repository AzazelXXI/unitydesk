"""update_models_to_integer_ids_and_add_missing_models

Revision ID: a051a586f8b6
Revises: 8de14920c091
Create Date: 2025-06-08 19:57:57.350519

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a051a586f8b6'
down_revision: Union[str, None] = '8de14920c091'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('milestones',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('NOT_STARTED', 'IN_PROGRESS', 'COMPLETED', 'OVERDUE', name='milestone_status_enum'), nullable=False),
    sa.Column('target_date', sa.DateTime(), nullable=False),
    sa.Column('completion_date', sa.DateTime(), nullable=True),
    sa.Column('is_critical', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('project_members',
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role', sa.String(length=50), nullable=False),
    sa.Column('joined_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('project_id', 'user_id')
    )
    op.create_table('risks',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('impact', sa.Text(), nullable=True),
    sa.Column('mitigation_plan', sa.Text(), nullable=True),
    sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='risk_priority_enum'), nullable=False),
    sa.Column('status', sa.Enum('IDENTIFIED', 'MONITORING', 'MITIGATED', 'OCCURRED', 'CLOSED', name='risk_status_enum'), nullable=False),
    sa.Column('probability', sa.Integer(), nullable=True),
    sa.Column('impact_score', sa.Integer(), nullable=True),
    sa.Column('identified_date', sa.DateTime(), nullable=False),
    sa.Column('target_resolution_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('notifications',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('type', sa.Enum('TASK_ASSIGNED', 'TASK_COMPLETED', 'TASK_OVERDUE', 'PROJECT_UPDATE', 'MILESTONE_REACHED', 'COMMENT_ADDED', 'SYSTEM_ALERT', name='notification_type_enum'), nullable=False),
    sa.Column('is_read', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('read_at', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('task_assignees',
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('task_id', 'user_id')
    )
    op.create_table('task_dependencies',
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('depends_on_task_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['depends_on_task_id'], ['tasks.id'], ),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ),
    sa.PrimaryKeyConstraint('task_id', 'depends_on_task_id')
    )
    op.drop_index('ix_teams_id', table_name='teams')
    op.drop_table('teams')
    op.drop_table('team_members')
    op.drop_table('project_teams')
    op.add_column('attachments', sa.Column('mime_type', sa.String(length=100), nullable=True))
    op.add_column('attachments', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.add_column('attachments', sa.Column('updated_at', sa.DateTime(), nullable=False))
    op.add_column('attachments', sa.Column('uploader_id', sa.Integer(), nullable=False))
    op.add_column('attachments', sa.Column('project_id', sa.Integer(), nullable=True))
    op.alter_column('attachments', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('attachments', 'file_size',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_index('ix_attachments_id', table_name='attachments')
    op.drop_constraint('attachments_user_id_fkey', 'attachments', type_='foreignkey')
    op.create_foreign_key(None, 'attachments', 'users', ['uploader_id'], ['id'])
    op.create_foreign_key(None, 'attachments', 'projects', ['project_id'], ['id'])
    op.drop_column('attachments', 'uploaded_at')
    op.drop_column('attachments', 'user_id')
    op.drop_column('attachments', 'file_type')
    op.alter_column('calendars', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('calendars', 'user_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.drop_index('ix_calendars_id', table_name='calendars')
    op.add_column('comments', sa.Column('content', sa.Text(), nullable=False))
    op.alter_column('comments', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('comments', 'user_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.alter_column('comments', 'task_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.drop_index('ix_comments_id', table_name='comments')
    op.drop_column('comments', 'text_content')
    op.alter_column('events', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('events', 'calendar_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.alter_column('events', 'project_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.drop_index('ix_events_id', table_name='events')
    op.alter_column('projects', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('projects', 'owner_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.drop_index('ix_projects_id', table_name='projects')
    op.add_column('task_attachments', sa.Column('attached_at', sa.DateTime(), nullable=True))
    op.alter_column('task_attachments', 'task_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.alter_column('task_attachments', 'attachment_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.add_column('tasks', sa.Column('estimated_hours', sa.Integer(), nullable=True))
    op.add_column('tasks', sa.Column('actual_hours', sa.Integer(), nullable=True))
    op.add_column('tasks', sa.Column('tags', sa.String(length=500), nullable=True))
    op.add_column('tasks', sa.Column('due_date', sa.DateTime(), nullable=True))
    op.add_column('tasks', sa.Column('completed_date', sa.DateTime(), nullable=True))
    op.alter_column('tasks', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('tasks', 'priority',
               existing_type=postgresql.ENUM('LOW', 'MEDIUM', 'HIGH', 'URGENT', name='task_priority_enum'),
               nullable=False)
    op.alter_column('tasks', 'project_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.drop_index('ix_tasks_id', table_name='tasks')
    op.drop_constraint('tasks_name_key', 'tasks', type_='unique')
    op.drop_constraint('tasks_assignee_id_fkey', 'tasks', type_='foreignkey')
    op.drop_column('tasks', 'end_date')
    op.drop_column('tasks', 'is_recurring')
    op.drop_column('tasks', 'assignee_id')
    op.drop_column('tasks', 'estimated_time')
    op.drop_column('tasks', 'type')
    op.drop_column('tasks', 'category')
    op.add_column('users', sa.Column('name', sa.String(length=255), nullable=False))
    op.add_column('users', sa.Column('phone', sa.String(length=20), nullable=True))
    op.add_column('users', sa.Column('avatar', sa.String(length=500), nullable=True))
    op.add_column('users', sa.Column('last_login', sa.DateTime(), nullable=True))
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('users', 'user_type',
               existing_type=postgresql.ENUM('PROJECT_MANAGER', 'TEAM_MEMBER', 'CLIENT', name='user_type_enum'),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('users', 'status',
               existing_type=postgresql.ENUM('ONLINE', 'OFFLINE', 'IDLE', name='user_status_enum'),
               type_=sa.Enum('ONLINE', 'OFFLINE', 'IDLE', name='userstatusenum'),
               nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_id', table_name='users')
    op.drop_index('ix_users_username', table_name='users')
    op.create_unique_constraint(None, 'users', ['email'])
    op.drop_constraint('fk_users_project_id_projects', 'users', type_='foreignkey')
    op.drop_column('users', 'update_at')
    op.drop_column('users', 'username')
    op.drop_column('users', 'project_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('username', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('update_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.create_foreign_key('fk_users_project_id_projects', 'users', 'projects', ['project_id'], ['id'])
    op.drop_constraint(None, 'users', type_='unique')
    op.create_index('ix_users_username', 'users', ['username'], unique=True)
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('users', 'status',
               existing_type=sa.Enum('ONLINE', 'OFFLINE', 'IDLE', name='userstatusenum'),
               type_=postgresql.ENUM('ONLINE', 'OFFLINE', 'IDLE', name='user_status_enum'),
               nullable=False)
    op.alter_column('users', 'user_type',
               existing_type=sa.String(length=50),
               type_=postgresql.ENUM('PROJECT_MANAGER', 'TEAM_MEMBER', 'CLIENT', name='user_type_enum'),
               existing_nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_column('users', 'last_login')
    op.drop_column('users', 'avatar')
    op.drop_column('users', 'phone')
    op.drop_column('users', 'name')
    op.add_column('tasks', sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('type', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('estimated_time', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('assignee_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('is_recurring', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.create_foreign_key('tasks_assignee_id_fkey', 'tasks', 'users', ['assignee_id'], ['id'])
    op.create_unique_constraint('tasks_name_key', 'tasks', ['name'])
    op.create_index('ix_tasks_id', 'tasks', ['id'], unique=False)
    op.alter_column('tasks', 'project_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('tasks', 'priority',
               existing_type=postgresql.ENUM('LOW', 'MEDIUM', 'HIGH', 'URGENT', name='task_priority_enum'),
               nullable=True)
    op.alter_column('tasks', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_column('tasks', 'completed_date')
    op.drop_column('tasks', 'due_date')
    op.drop_column('tasks', 'tags')
    op.drop_column('tasks', 'actual_hours')
    op.drop_column('tasks', 'estimated_hours')
    op.alter_column('task_attachments', 'attachment_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('task_attachments', 'task_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.drop_column('task_attachments', 'attached_at')
    op.create_index('ix_projects_id', 'projects', ['id'], unique=False)
    op.alter_column('projects', 'owner_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('projects', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True)
    op.create_index('ix_events_id', 'events', ['id'], unique=False)
    op.alter_column('events', 'project_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('events', 'calendar_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('events', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True)
    op.add_column('comments', sa.Column('text_content', sa.TEXT(), autoincrement=False, nullable=False))
    op.create_index('ix_comments_id', 'comments', ['id'], unique=False)
    op.alter_column('comments', 'task_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('comments', 'user_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('comments', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_column('comments', 'content')
    op.create_index('ix_calendars_id', 'calendars', ['id'], unique=False)
    op.alter_column('calendars', 'user_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('calendars', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True)
    op.add_column('attachments', sa.Column('file_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('attachments', sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('attachments', sa.Column('uploaded_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'attachments', type_='foreignkey')
    op.drop_constraint(None, 'attachments', type_='foreignkey')
    op.create_foreign_key('attachments_user_id_fkey', 'attachments', 'users', ['user_id'], ['id'])
    op.create_index('ix_attachments_id', 'attachments', ['id'], unique=False)
    op.alter_column('attachments', 'file_size',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('attachments', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_column('attachments', 'project_id')
    op.drop_column('attachments', 'uploader_id')
    op.drop_column('attachments', 'updated_at')
    op.drop_column('attachments', 'created_at')
    op.drop_column('attachments', 'mime_type')
    op.create_table('project_teams',
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('team_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='project_teams_project_id_fkey'),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], name='project_teams_team_id_fkey'),
    sa.PrimaryKeyConstraint('project_id', 'team_id', name='project_teams_pkey')
    )
    op.create_table('team_members',
    sa.Column('team_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], name='team_members_team_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='team_members_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('team_id', 'user_id', name='team_members_pkey')
    )
    op.create_table('teams',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='teams_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='teams_pkey')
    )
    op.create_index('ix_teams_id', 'teams', ['id'], unique=False)
    op.drop_table('task_dependencies')
    op.drop_table('task_assignees')
    op.drop_table('notifications')
    op.drop_table('risks')
    op.drop_table('project_members')
    op.drop_table('milestones')
    # ### end Alembic commands ###
