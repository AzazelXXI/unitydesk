/**
 * WebRTC Connection Helper
 * C·∫£i thi·ªán k·∫øt n·ªëi WebRTC gi·ªØa c√°c m·∫°ng kh√°c nhau
 */

import { logger } from './logger.js';
import { state } from './state.js';
import { sendToServer } from './signaling.js';
import { getRTCConfig } from './config.js';

/**
 * Bu·ªôc s·ª≠ d·ª•ng TURN Server ƒë·ªÉ t·∫°o k·∫øt n·ªëi relay
 * @param {RTCPeerConnection} pc - K·∫øt n·ªëi c·∫ßn c·∫≠p nh·∫≠t
 * @param {string} remoteClientId - ID c·ªßa ng∆∞·ªùi d√πng ƒë·∫ßu b√™n kia
 */
export const forceTurnUsage = async (pc, remoteClientId) => {
    // ƒê√°nh d·∫•u ƒë√£ k√≠ch ho·∫°t ch·∫ø ƒë·ªô TURN
    state.forcedTurnUsage = true;
    
    try {
        // L∆∞u s·ªë l·∫ßn th·∫•t b·∫°i ƒë·ªÉ d√πng relay cho l·∫ßn sau
        const failCount = parseInt(localStorage.getItem('rtc_connection_failures') || '0');
        localStorage.setItem('rtc_connection_failures', (failCount + 1).toString());
        
        // C·∫≠p nh·∫≠t c·∫•u h√¨nh ƒë·ªÉ s·ª≠ d·ª•ng ch·ªâ TURN
        const currentConfig = pc.getConfiguration();
        logger.info(`K√≠ch ho·∫°t ch·∫ø ƒë·ªô TURN-only ƒë·ªÉ c·∫£i thi·ªán k·∫øt n·ªëi v·ªõi ${remoteClientId}`);
        
        pc.setConfiguration({
            ...currentConfig,
            iceTransportPolicy: 'relay'
        });
        
        // Kh·ªüi ƒë·ªông l·∫°i ICE ƒë·ªÉ b·∫Øt ƒë·∫ßu thu th·∫≠p c√°c candidates m·ªõi
        pc.restartIce();
        
        // Th√¥ng b√°o cho b√™n kia r·∫±ng ch√∫ng ta ƒëang th·ª≠ l·∫°i v·ªõi TURN
        sendToServer({
            type: "ICE_RESTART",
            target: remoteClientId,
            forceRelay: true
        });
        
        return true;
    } catch (err) {
        logger.error(`Kh√¥ng th·ªÉ k√≠ch ho·∫°t ch·∫ø ƒë·ªô TURN: ${err.message}`);
        return false;
    }
};

/**
 * Theo d√µi vi·ªác thu th·∫≠p ICE candidates
 * @param {RTCPeerConnection} pc - K·∫øt n·ªëi WebRTC
 * @param {string} remoteClientId - ID c·ªßa ng∆∞·ªùi d√πng ƒë·∫ßu b√™n kia
 */
export const monitorIceCandidates = (pc, remoteClientId) => {
    // ƒê·∫∑t timeout ƒë·ªÉ ki·ªÉm tra n·∫øu kh√¥ng c√≥ relay candidates sau m·ªôt kho·∫£ng th·ªùi gian
    if (!state.turnCheckTimeout) {
        state.turnCheckTimeout = setTimeout(async () => {
            // N·∫øu ch∆∞a nh·∫≠n ƒë∆∞·ª£c relay candidate sau 3 gi√¢y (gi·∫£m xu·ªëng t·ª´ 5s ƒë·ªÉ ph·∫£n ·ª©ng nhanh h∆°n)
            if (!state.hasSentRelayCandidate) {
                logger.warn(`Kh√¥ng t√¨m th·∫•y RELAY candidates cho ${remoteClientId}, ƒëang bu·ªôc s·ª≠ d·ª•ng TURN`);
                await forceTurnUsage(pc, remoteClientId);
            }
        }, 3000);
    }
    
    // Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi s·ªõm h∆°n - sau 5 gi√¢y
    setTimeout(() => {
        if (pc.connectionState !== 'connected' && pc.iceConnectionState !== 'connected') {
            logger.warn(`K·∫øt n·ªëi v·ªõi ${remoteClientId} ch∆∞a th√†nh c√¥ng sau 5 gi√¢y, ƒëang th·ª≠ d√πng TURN server kh√°c`);
            
            // Th·ª≠ s·ª≠ d·ª•ng m√°y ch·ªß TURN kh√°c
            rotateToNextTurnServer(pc, remoteClientId);
        }
    }, 5000);
    
    // Ki·ªÉm tra l·∫°i sau 15 gi√¢y n·∫øu v·∫´n kh√¥ng c√≥ k·∫øt n·ªëi - √°p d·ª•ng bi·ªán ph√°p kh·∫©n c·∫•p
    setTimeout(() => {
        if (pc.connectionState !== 'connected' && pc.iceConnectionState !== 'connected') {
            logger.error(`K·∫øt n·ªëi v·ªõi ${remoteClientId} v·∫´n th·∫•t b·∫°i sau 15 gi√¢y, √°p d·ª•ng bi·ªán ph√°p kh·∫©n c·∫•p`);
            
            // Gi·∫£i ph√°p kh·∫©n c·∫•p: Bu·ªôc s·ª≠ d·ª•ng ch·ªâ m·ªôt TURN server ƒë√°ng tin c·∫≠y nh·∫•t
            emergencyTurnConnection(pc, remoteClientId);
            
            // TƒÉng s·ªë l·∫ßn th·∫•t b·∫°i ƒë·ªÉ l·∫ßn sau t·ª± ƒë·ªông d√πng ch·∫ø ƒë·ªô kh·∫©n c·∫•p
            const failCount = parseInt(localStorage.getItem('rtc_connection_failures') || '0');
            localStorage.setItem('rtc_connection_failures', (failCount + 2).toString());
        }
    }, 15000);
};

/**
 * Thay ƒë·ªïi sang m√°y ch·ªß TURN kh√°c n·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c
 * @param {RTCPeerConnection} pc - K·∫øt n·ªëi WebRTC
 * @param {string} remoteClientId - ID c·ªßa ng∆∞·ªùi d√πng ƒë·∫ßu b√™n kia
 */
export const rotateToNextTurnServer = async (pc, remoteClientId) => {
    try {
        if (!state.currentTurnServerIndex) {
            state.currentTurnServerIndex = 0;
        }
        
        // L·∫•y c·∫•u h√¨nh ICE servers t·ª´ config
        const config = getRTCConfig();
        const turnServers = config.iceServers.filter(server => {
            const urls = Array.isArray(server.urls) ? server.urls : [server.urls];
            return urls.some(url => url.startsWith('turn:') || url.startsWith('turns:'));
        });
        
        if (turnServers.length === 0) {
            logger.error('Kh√¥ng t√¨m th·∫•y TURN servers ƒë·ªÉ s·ª≠ d·ª•ng');
            return false;
        }
        
        // Chuy·ªÉn sang server ti·∫øp theo
        state.currentTurnServerIndex = (state.currentTurnServerIndex + 1) % turnServers.length;
        const selectedTurnServer = turnServers[state.currentTurnServerIndex];
        
        logger.info(`ƒêang th·ª≠ v·ªõi TURN server kh√°c: ${Array.isArray(selectedTurnServer.urls) 
            ? selectedTurnServer.urls[0] 
            : selectedTurnServer.urls}`);
        
        // C·∫≠p nh·∫≠t c·∫•u h√¨nh v·ªõi TURN server m·ªõi
        const currentConfig = pc.getConfiguration();
        pc.setConfiguration({
            ...currentConfig,
            iceServers: [selectedTurnServer],
            iceTransportPolicy: 'relay'
        });
        
        // Kh·ªüi ƒë·ªông l·∫°i qu√° tr√¨nh ICE
        pc.restartIce();
        
        return true;
    } catch (err) {
        logger.error(`L·ªói khi thay ƒë·ªïi TURN server: ${err.message}`);
        return false;
    }
};

/**
 * Gi·∫£i ph√°p k·∫øt n·ªëi kh·∫©n c·∫•p - s·ª≠ d·ª•ng m·ªôt TURN server ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n ho·∫°t ƒë·ªông t·ªët
 * @param {RTCPeerConnection} pc - K·∫øt n·ªëi WebRTC
 * @param {string} remoteClientId - ID c·ªßa ng∆∞·ªùi d√πng ƒë·∫ßu b√™n kia
 */
export const emergencyTurnConnection = async (pc, remoteClientId) => {
    try {
        logger.warn(`üö® K√≠ch ho·∫°t k·∫øt n·ªëi kh·∫©n c·∫•p v·ªõi ${remoteClientId}`);
        
        // S·ª≠ d·ª•ng c√°c TURN server ƒë√°ng tin c·∫≠y nh·∫•t cho k·∫øt n·ªëi kh·∫©n c·∫•p
        const emergencyTurnServers = [
            {
                urls: [
                    'turn:numb.viagenie.ca:3478?transport=udp',
                    'turn:numb.viagenie.ca:3478?transport=tcp',
                ],
                username: 'vietnam.webrtc@gmail.com',
                credential: 'muadong2022'
            },
            {
                urls: [
                    'turn:sandbox-turn.stunserver.com:3478',
                ],
                username: 'guest',
                credential: 'guest'
            }
        ];
        
        // C·∫≠p nh·∫≠t c·∫•u h√¨nh ƒë·ªÉ ch·ªâ s·ª≠ d·ª•ng c√°c TURN server kh·∫©n c·∫•p
        pc.setConfiguration({
            iceServers: emergencyTurnServers,
            iceTransportPolicy: 'relay',   // Ch·ªâ d√πng relay candidates
            bundlePolicy: 'max-bundle',
            rtcpMuxPolicy: 'require',
            iceCandidatePoolSize: 1       // Gi·∫£m xu·ªëng ƒë·ªÉ t·∫≠p trung v√†o c√°c candidates t·ªët nh·∫•t
        });
        
        // Th√¥ng b√°o cho b√™n kia
        sendToServer({
            type: "EMERGENCY_RELAY",
            target: remoteClientId
        });
        
        // Bu·ªôc kh·ªüi ƒë·ªông l·∫°i qu√° tr√¨nh ICE
        pc.restartIce();
        
        // N·∫øu k·∫øt n·ªëi v·∫´n ·ªü tr·∫°ng th√°i failed, th·ª≠ t·∫°o offer m·ªõi
        if (pc.connectionState === 'failed') {
            const offer = await pc.createOffer({iceRestart: true});
            await pc.setLocalDescription(offer);
            
            // G·ª≠i offer m·ªõi t·ªõi ng∆∞·ªùi d√πng b√™n kia
            sendToServer({
                type: "OFFER",
                offer: pc.localDescription,
                target: remoteClientId,
                forceRelay: true
            });
        }
        
        return true;
    } catch (err) {
        logger.error(`Kh√¥ng th·ªÉ k√≠ch ho·∫°t k·∫øt n·ªëi kh·∫©n c·∫•p: ${err.message}`);
        return false;
    }
};

/**
 * √Åp d·ª•ng gi·∫£i ph√°p kh·∫Øc ph·ª•c m·∫°ng di ƒë·ªông (3G/4G) - c√°c nh√† m·∫°ng th∆∞·ªùng s·ª≠ d·ª•ng NAT nghi√™m ng·∫∑t
 * @param {RTCPeerConnection} pc - K·∫øt n·ªëi WebRTC 
 * @param {string} remoteClientId - ID c·ªßa ng∆∞·ªùi d√πng ƒë·∫ßu b√™n kia
 */
export const mobileCellularFix = async (pc, remoteClientId) => {
    try {
        // Ph√°t hi·ªán k·∫øt n·ªëi di ƒë·ªông d·ª±a tr√™n connection, navigator.connection kh√¥ng kh·∫£ d·ª•ng tr√™n m·ªçi tr√¨nh duy·ªát
        const isMobileNetwork = navigator.connection ? 
            (navigator.connection.type === 'cellular' || navigator.connection.effectiveType === '3g' || navigator.connection.effectiveType === '4g') : 
            (window.navigator.userAgent.includes('Mobile') || window.navigator.userAgent.includes('Android'));
        
        if (isMobileNetwork) {
            logger.info(`Ph√°t hi·ªán k·∫øt n·ªëi di ƒë·ªông cho ${remoteClientId}, √°p d·ª•ng c·∫•u h√¨nh ƒë·∫∑c bi·ªát`);
            
            // TƒÉng k·∫øt n·ªëi TCP cho m·∫°ng di ƒë·ªông (nhi·ªÅu nh√† m·∫°ng ch·∫∑n UDP)
            const mobileTurnServers = [
                {
                    urls: [
                        'turn:numb.viagenie.ca:3478?transport=tcp',
                        'turns:numb.viagenie.ca:443' // S·ª≠ d·ª•ng TURNS qua SSL ƒë·ªÉ tr√°nh c√°c t∆∞·ªùng l·ª≠a
                    ],
                    username: 'vietnam.webrtc@gmail.com',
                    credential: 'muadong2022'
                }
            ];
            
            // C·∫≠p nh·∫≠t c·∫•u h√¨nh
            const currentConfig = pc.getConfiguration();
            pc.setConfiguration({
                ...currentConfig,
                iceServers: [...currentConfig.iceServers, ...mobileTurnServers],
                iceTransportPolicy: 'relay'
            });
            
            return true;
        }
        
        return false;
    } catch (err) {
        logger.error(`L·ªói khi √°p d·ª•ng gi·∫£i ph√°p cho m·∫°ng di ƒë·ªông: ${err.message}`);
        return false;
    }
};

/**
 * T·ªëi ∆∞u h√≥a SDP cho k·∫øt n·ªëi xuy√™n m·∫°ng
 * @param {string} sdp - SDP offer/answer ban ƒë·∫ßu
 * @returns {string} SDP ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a
 */
export const optimizeSdp = (sdp) => {
    try {
        // ∆Øu ti√™n IPv4 h∆°n IPv6
        sdp = sdp.replace(/a=candidate:.*foundation .*network-id.*\r\n/g, (match) => {
            if (match.includes(" udp ") && !match.includes("network-cost")) {
                return match + "a=candidate:";
            }
            return match;
        });
        
        // ƒê·∫∑t ∆∞u ti√™n cao h∆°n cho c√°c ·ª©ng vi√™n relay
        sdp = sdp.replace(/a=candidate:.*relay.*typ relay.*\r\n/g, (match) => {
            // TƒÉng ƒë·ªô ∆∞u ti√™n cho c√°c relay candidates
            const parts = match.split(' ');
            if (parts.length > 5) {
                // Thay ƒë·ªïi gi√° tr·ªã ∆∞u ti√™n (th∆∞·ªùng ·ªü v·ªã tr√≠ th·ª© 4)
                parts[3] = '2130706431'; // Gi√° tr·ªã ∆∞u ti√™n cao nh·∫•t
                return parts.join(' ') + '\r\n';
            }
            return match;
        });
        
        // Th√™m c√°c tham s·ªë ICE m·ªõi gi√∫p k·∫øt n·ªëi qua NAT nghi√™m ng·∫∑t
        if (!sdp.includes('a=ice-options:trickle')) {
            sdp = sdp.replace(/(a=ice-pwd:[^\r\n]*\r\n)/g, '$1a=ice-options:trickle\r\n');
        }
        
        // T·ªëi ∆∞u h√≥a codec v√† gi·∫£m bƒÉng th√¥ng khi c·∫ßn
        sdp = sdp.replace(/(a=rtpmap:\d+ H264\/90000\r\n)/g, 
            '$1a=fmtp:96 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42e01f\r\n');
        
        return sdp;
    } catch (e) {
        logger.error(`L·ªói khi t·ªëi ∆∞u h√≥a SDP: ${e.message}`);
        return sdp; // Tr·∫£ v·ªÅ SDP g·ªëc n·∫øu c√≥ l·ªói
    }
};
